||TO-DO||
(General) Adjust various parameters (t_horizon, d_horizon, etc.) to account for real life encounters; no parameters are perfect so a collision with wrong parameters doesn't necessarily mean anything
(1) Look into changing diverging criteria; prob behaves weird/wrong in certain cases: own_velo is past occ_pos, occ_velo = 0, etc
    -Idea: check if doi_norm increases by finding component of velocity in direction of occ_pos
(2) Look into timestep problem:
    -For analyzing RVs and finding RAVs (addresses the timestep problem - though I think the way it is done now is following the paper)
        -Forecast the occ_pos
        -Forecast own_pos for each RV by considering the FA vectors and delta_t
        -Now analyze each RV from the forecasted data
(3) Consider algo that doesn't do RAVs, but just prioritizes RVs based on closest distance to occ (similar to buffer method)
        -This would work for any scenario - normal, no RAVs, in RPZ, etc

||ALGORITHM NOTES||
Ownship Parameters
-Max speed: max speed own can reach
-Max accel: max accel own can undergo
-Delta time: computational timestep (see timestep problem)

Geometry
-See "Three-Dimensional Velocity Obstacle Method for UAV Deconflicting Maneuvers" for general info
-RPZ
    -Occ radius: measured radius of occ
    -Lidar correction: scale factor * occ radius, accounts for any underestimate error from lidar
    -Safety distance: additional distance for safe operation, own should never enter this
    -Buffer distance: additional distance that accounts for irl errors, disturbances, and nonlinearities; own can enter buffer

Collision Parameters
-Distance: consider collision imminent when within this horizon (whether colliding or not)
-Time horizon: consider collision imminent when colliding within this horizon

Transform Matrix
-Didn't use trig form given in "Three-Dimensional Velocity Obstacle Method for UAV Deconflicting Maneuvers" because it didn't work in testing
-Created matrix using basis vectors instead - verified and seems correct in testing
-1 transform matrix per occ

Mode Determination
-For each occ, determine t_imminent, d_imminent, colliding, diverging
    -t_imminent: colliding within time frame; d_imminent: within distance; colliding: colliding at any time; diverging: diverging from obstacle (and path)
    -Divergence check (see:https://math.stackexchange.com/questions/4199524/how-to-calculate-the-intersect-of-a-point-vector-and-a-cone-in-3d-space and https://math.stackexchange.com/questions/4382927/intersection-of-a-line-and-cone)
        Main Principal: check if own absolute velocity lies within the volume given by translating CC cone infinitely (1-dir) along occ velocity
        Method: Parameterize an infinite (1-dir) vector starting at the coordinates given by own absolute velocity; point vector in opposite dir of occ velocity; check if the vector intersects CC cone
-Combinations
    t_imminent == T --> avoid
    t_imminent == F & d_imminent == F --> restore
    t_imminent == F & d_imminent == T
        diverging == T --> restore
        diverging == F
            colliding == T --> avoid
            colliding == F --> maintain
-The candidate mode is selected to be the highest mode among modes calculated (1 mode per occ)
-If candidate mode is restore, check if the restore manuever will immediately lead to avoid mode (this obviates mode oscillation)

Avoidance Mode - Velocity Selection
-Calculate RV
-For own outside rpz
    -Find RAV by, for each occ, eliminating RV that lead to collision within t_horizon
    -For RAV
        -Selects velocity that is closest to restore velocity
    -For no RAV
        -Select velocity that increases doi the fastest for the closest occ
-For own within rpz
    -Select velocity that increases doi the fastest for the closest occ

Maintain Mode
-Select current velocity

Restore Mode
-Give control to path planner

||MISC||
(1) Could probably find if velo is colliding by doing a distance check (similar to buffer math) - transform matrix works so keep that for now
(2) Might not even need restore check - keep for now